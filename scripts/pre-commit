#!/bin/bash

# Check if docs files are being committed
if git diff --cached --name-only | grep -E "^docs/" > /dev/null; then
    echo "Docs files detected in commit. Auto-incrementing version..."
    
    # Read current version from index.html
    CURRENT_VERSION=$(grep -o 'const VERSION="[^"]*"' docs/index.html | cut -d'"' -f2)
    echo "Current version: $CURRENT_VERSION"
    
    # Parse version components
    IFS='.' read -r major minor patch <<< "$CURRENT_VERSION"
    
    # Increment patch version
    NEW_PATCH=$((patch + 1))
    NEW_VERSION="$major.$minor.$NEW_PATCH"
    echo "New version: $NEW_VERSION"
    
    # Update version in index.html (macOS/BSD sed compatible)
    sed -i '' "s/const VERSION=\"[^\"]*\"/const VERSION=\"$NEW_VERSION\"/" docs/index.html
    
    # Update version in list.html (macOS/BSD sed compatible)
    sed -i '' "s/const VERSION=\"[^\"]*\"/const VERSION=\"$NEW_VERSION\"/" docs/list.html
    
    # Update Rust version in Cargo.toml (increment patch version)
    # Current Rust version is 0.1.0, so we'll increment to 0.1.1, 0.1.2, etc.
    CURRENT_RUST_VERSION=$(grep '^version = ' Cargo.toml | cut -d'"' -f2)
    echo "Current Rust version: $CURRENT_RUST_VERSION"
    
    # Parse Rust version components
    IFS='.' read -r rust_major rust_minor rust_patch <<< "$CURRENT_RUST_VERSION"
    
    # Increment Rust patch version
    NEW_RUST_PATCH=$((rust_patch + 1))
    NEW_RUST_VERSION="$rust_major.$rust_minor.$NEW_RUST_PATCH"
    echo "New Rust version: $NEW_RUST_VERSION"
    
    # Update version in Cargo.toml (macOS/BSD sed compatible)
    sed -i '' "s/^version = \"[^\"]*\"/version = \"$NEW_RUST_VERSION\"/" Cargo.toml
    
    # Add the updated files to the commit
    git add docs/index.html docs/list.html Cargo.toml
    
    echo "Version auto-incremented to $NEW_VERSION in frontend files"
    echo "Rust version auto-incremented to $NEW_RUST_VERSION in Cargo.toml"
fi 