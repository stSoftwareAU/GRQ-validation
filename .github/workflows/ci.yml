name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Build and Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
        components: rustfmt, clippy
        
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
          
    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings
      
    - name: Check types
      run: cargo check --all-targets --all-features
      
    - name: Build project
      run: cargo build --verbose
      
    - name: Ensure binary is executable
      run: |
        chmod +x target/debug/grq-validation
        ls -la target/debug/grq-validation
      
    - name: Run tests
      run: cargo test --all-targets --all-features --verbose
      
    - name: Build release version
      run: cargo build --release --verbose
      
    - name: Install cargo-audit
      run: cargo install cargo-audit
      
    - name: Check for security vulnerabilities
      run: cargo audit --deny warnings
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      if: success()
      with:
        name: grq-validation-binary
        path: target/release/grq-validation
        retention-days: 7

  validation:
    name: Project Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check for required files
      run: |
        echo "üîç Checking for required project files..."
        
        required_files=(
          "Cargo.toml"
          "README.md"
          "LICENSE"
          "src/main.rs"
          "run.sh"
        )
        
        missing_files=()
        for file in "${required_files[@]}"; do
          if [ ! -f "$file" ]; then
            missing_files+=("$file")
          fi
        done
        
        if [ ${#missing_files[@]} -ne 0 ]; then
          echo "‚ùå Missing required files: ${missing_files[*]}"
          exit 1
        else
          echo "‚úÖ All required files present"
        fi

    - name: Validate Cargo.toml
      run: |
        echo "üîç Validating Cargo.toml..."
        
        if ! cargo check --manifest-path Cargo.toml --quiet; then
          echo "‚ùå Cargo.toml validation failed"
          exit 1
        fi
        
        for field in "name" "version" "edition"; do
          if ! grep -q "$field = " Cargo.toml; then
            echo "‚ùå Missing '$field' field in Cargo.toml"
            exit 1
          fi
        done
        
        echo "‚úÖ Cargo.toml validation passed"

    - name: Check documentation
      run: |
        echo "üîç Checking documentation..."
        
        readme_lines=$(wc -l < README.md)
        if [ "$readme_lines" -lt 10 ]; then
          echo "‚ùå README.md seems too short (${readme_lines} lines)"
          exit 1
        fi
        
        if [ -f "src/lib.rs" ]; then
          doc_comments=$(grep -c "///" src/lib.rs || echo "0")
          if [ "$doc_comments" -eq 0 ]; then
            echo "‚ö†Ô∏è  No documentation comments found in src/lib.rs"
          else
            echo "‚úÖ Found $doc_comments documentation comments"
          fi
        fi

    - name: Check run.sh permissions
      run: |
        echo "üîç Checking run.sh permissions..."
        if [ -f "run.sh" ]; then
          if [ ! -x "run.sh" ]; then
            echo "‚ùå run.sh is not executable"
            exit 1
          else
            echo "‚úÖ run.sh is executable"
          fi
        else
          echo "‚ö†Ô∏è  run.sh not found"
        fi 